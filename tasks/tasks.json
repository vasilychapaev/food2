{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Docker Environment",
      "description": "Create Docker Compose configuration for Laravel and MongoDB services",
      "details": "Create a docker-compose.yml file with the following services:\n1. Laravel service using PHP 8.x image\n2. MongoDB service\n3. Configure appropriate volumes for persistence\n4. Set up networking between services\n5. Configure Laravel to run with artisan serve\n\nExample docker-compose.yml structure:\n```yaml\nversion: '3'\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: laravel-app\n    restart: unless-stopped\n    volumes:\n      - ./:/var/www\n    ports:\n      - \"8000:8000\"\n    command: php artisan serve --host=0.0.0.0\n    depends_on:\n      - mongo\n\n  mongo:\n    image: mongo:latest\n    container_name: mongodb\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongo-data:/data/db\n\nvolumes:\n  mongo-data:\n```",
      "testStrategy": "Verify Docker Compose setup by running 'docker-compose up' and ensuring both Laravel and MongoDB services start correctly. Test connectivity between services by accessing Laravel application and verifying it can connect to MongoDB.",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Initialize Laravel Project",
      "description": "Create a new Laravel project and configure it to work with MongoDB",
      "details": "1. Create a new Laravel project:\n```bash\ncomposer create-project laravel/laravel .\n```\n\n2. Install MongoDB PHP driver and Laravel MongoDB package:\n```bash\ncomposer require jenssegers/mongodb\n```\n\n3. Configure MongoDB connection in config/database.php:\n```php\n'mongodb' => [\n    'driver' => 'mongodb',\n    'host' => env('MONGO_HOST', 'mongo'),\n    'port' => env('MONGO_PORT', 27017),\n    'database' => env('MONGO_DATABASE', 'food_tracker'),\n    'username' => env('MONGO_USERNAME', ''),\n    'password' => env('MONGO_PASSWORD', ''),\n    'options' => [\n        'database' => env('MONGO_AUTH_DATABASE', 'admin'),\n    ],\n],\n```\n\n4. Update .env file with MongoDB connection details\n\n5. Configure the MongoDB service provider in config/app.php:\n```php\n'providers' => [\n    // ...\n    Jenssegers\\Mongodb\\MongodbServiceProvider::class,\n],\n```",
      "testStrategy": "Run 'php artisan tinker' and test MongoDB connection by creating and retrieving a test document. Verify that Laravel can connect to MongoDB and perform basic CRUD operations.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Create MongoDB Models",
      "description": "Define MongoDB models for ingredients, recipes, food logs, and daily summaries",
      "details": "Create the following models extending the MongoDB model class:\n\n1. Ingredient.php:\n```php\n<?php\nnamespace App\\Models;\nuse Jenssegers\\Mongodb\\Eloquent\\Model;\n\nclass Ingredient extends Model\n{\n    protected $connection = 'mongodb';\n    protected $collection = 'ingredients';\n    \n    protected $fillable = [\n        'name',\n        'aliases',\n        'calories',\n        'protein',\n        'fat',\n        'carbs'\n    ];\n    \n    protected $casts = [\n        'aliases' => 'array',\n        'calories' => 'float',\n        'protein' => 'float',\n        'fat' => 'float',\n        'carbs' => 'float'\n    ];\n}\n```\n\n2. Recipe.php:\n```php\n<?php\nnamespace App\\Models;\nuse Jenssegers\\Mongodb\\Eloquent\\Model;\n\nclass Recipe extends Model\n{\n    protected $connection = 'mongodb';\n    protected $collection = 'recipes';\n    \n    protected $fillable = [\n        'name',\n        'aliases',\n        'ingredients',\n        'total_weight',\n        'calories',\n        'protein',\n        'fat',\n        'carbs'\n    ];\n    \n    protected $casts = [\n        'aliases' => 'array',\n        'ingredients' => 'array',\n        'total_weight' => 'float',\n        'calories' => 'float',\n        'protein' => 'float',\n        'fat' => 'float',\n        'carbs' => 'float'\n    ];\n}\n```\n\n3. FoodEntry.php:\n```php\n<?php\nnamespace App\\Models;\nuse Jenssegers\\Mongodb\\Eloquent\\Model;\n\nclass FoodEntry extends Model\n{\n    protected $connection = 'mongodb';\n    protected $collection = 'food_entries';\n    \n    protected $fillable = [\n        'date',\n        'meal_number',\n        'raw_entry',\n        'parsed_items',\n        'calories',\n        'protein',\n        'fat',\n        'carbs'\n    ];\n    \n    protected $casts = [\n        'date' => 'date',\n        'meal_number' => 'integer',\n        'parsed_items' => 'array',\n        'calories' => 'float',\n        'protein' => 'float',\n        'fat' => 'float',\n        'carbs' => 'float'\n    ];\n}\n```\n\n4. DailySummary.php:\n```php\n<?php\nnamespace App\\Models;\nuse Jenssegers\\Mongodb\\Eloquent\\Model;\n\nclass DailySummary extends Model\n{\n    protected $connection = 'mongodb';\n    protected $collection = 'daily_summaries';\n    \n    protected $fillable = [\n        'date',\n        'meals',\n        'total_calories',\n        'total_protein',\n        'total_fat',\n        'total_carbs'\n    ];\n    \n    protected $casts = [\n        'date' => 'date',\n        'meals' => 'array',\n        'total_calories' => 'float',\n        'total_protein' => 'float',\n        'total_fat' => 'float',\n        'total_carbs' => 'float'\n    ];\n}\n```",
      "testStrategy": "Create unit tests for each model to verify they correctly store and retrieve data from MongoDB. Test the relationship between models and ensure proper type casting for numeric fields.",
      "priority": "high",
      "dependencies": [
        2
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement Google Sheets API Integration",
      "description": "Set up Google Sheets API integration to fetch data from the specified spreadsheet",
      "details": "1. Install Google API Client:\n```bash\ncomposer require google/apiclient\n```\n\n2. Create a GoogleSheetsService class:\n```php\n<?php\nnamespace App\\Services;\n\nuse Google\\Client;\nuse Google\\Service\\Sheets;\n\nclass GoogleSheetsService\n{\n    private $client;\n    private $service;\n    private $spreadsheetId;\n    \n    public function __construct()\n    {\n        $this->spreadsheetId = config('services.google_sheets.spreadsheet_id');\n        $this->client = new Client();\n        $this->client->setApplicationName('Food Tracker');\n        $this->client->setScopes([Sheets::SPREADSHEETS_READONLY]);\n        \n        // Use service account or API key based on your setup\n        $this->client->setAuthConfig(storage_path('credentials.json'));\n        $this->service = new Sheets($this->client);\n    }\n    \n    public function getIngredientsSheet()\n    {\n        return $this->getSheetData('Ingredients');\n    }\n    \n    public function getRecipesSheet()\n    {\n        return $this->getSheetData('Recipes');\n    }\n    \n    public function getFoodLogSheet()\n    {\n        return $this->getSheetData('FoodLog');\n    }\n    \n    private function getSheetData($sheetName)\n    {\n        $range = $sheetName;\n        $response = $this->service->spreadsheets_values->get($this->spreadsheetId, $range);\n        return $response->getValues();\n    }\n}\n```\n\n3. Add Google Sheets configuration to config/services.php:\n```php\n'google_sheets' => [\n    'spreadsheet_id' => env('GOOGLE_SHEETS_SPREADSHEET_ID', '1ds9O-FEElpg8m4jseYO7cHBXXQl3WnjtIYqqAXmPnp8'),\n],\n```\n\n4. Update .env file with the spreadsheet ID\n\n5. Set up Google API credentials and store them securely",
      "testStrategy": "Create a test that connects to the Google Sheets API and retrieves data from each sheet (Ingredients, Recipes, FoodLog). Verify that the data structure matches expectations and all required fields are present.",
      "priority": "high",
      "dependencies": [
        2
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement Data Parser Service",
      "description": "Create a service to parse and process data from Google Sheets into structured format",
      "details": "Create a DataParserService to transform raw Google Sheets data into structured objects:\n\n```php\n<?php\nnamespace App\\Services;\n\nclass DataParserService\n{\n    public function parseIngredients(array $rawData)\n    {\n        $ingredients = [];\n        $headers = array_shift($rawData);\n        \n        foreach ($rawData as $row) {\n            if (count($row) < count($headers)) {\n                continue; // Skip incomplete rows\n            }\n            \n            $ingredient = [\n                'name' => $row[0] ?? '',\n                'aliases' => $this->parseAliases($row[1] ?? ''),\n                'calories' => (float)($row[2] ?? 0),\n                'protein' => (float)($row[3] ?? 0),\n                'fat' => (float)($row[4] ?? 0),\n                'carbs' => (float)($row[5] ?? 0)\n            ];\n            \n            $ingredients[] = $ingredient;\n        }\n        \n        return $ingredients;\n    }\n    \n    public function parseRecipes(array $rawData)\n    {\n        $recipes = [];\n        $headers = array_shift($rawData);\n        \n        foreach ($rawData as $row) {\n            if (count($row) < count($headers)) {\n                continue; // Skip incomplete rows\n            }\n            \n            $recipe = [\n                'name' => $row[0] ?? '',\n                'aliases' => $this->parseAliases($row[1] ?? ''),\n                'ingredients' => $this->parseRecipeIngredients($row[2] ?? ''),\n                'total_weight' => 0, // Will be calculated later\n                'calories' => 0, // Will be calculated later\n                'protein' => 0, // Will be calculated later\n                'fat' => 0, // Will be calculated later\n                'carbs' => 0 // Will be calculated later\n            ];\n            \n            $recipes[] = $recipe;\n        }\n        \n        return $recipes;\n    }\n    \n    public function parseFoodLog(array $rawData)\n    {\n        $foodEntries = [];\n        $headers = array_shift($rawData);\n        \n        foreach ($rawData as $row) {\n            if (count($row) < count($headers)) {\n                continue; // Skip incomplete rows\n            }\n            \n            $date = $this->parseDate($row[0] ?? '');\n            $mealNumber = (int)($row[1] ?? 0);\n            $rawEntry = $row[2] ?? '';\n            \n            $foodEntry = [\n                'date' => $date,\n                'meal_number' => $mealNumber,\n                'raw_entry' => $rawEntry,\n                'parsed_items' => [],\n                'calories' => 0,\n                'protein' => 0,\n                'fat' => 0,\n                'carbs' => 0\n            ];\n            \n            $foodEntries[] = $foodEntry;\n        }\n        \n        return $foodEntries;\n    }\n    \n    private function parseAliases(string $aliasString)\n    {\n        return array_map('trim', explode(',', $aliasString));\n    }\n    \n    private function parseRecipeIngredients(string $ingredientsString)\n    {\n        $ingredients = [];\n        $items = array_map('trim', explode(',', $ingredientsString));\n        \n        foreach ($items as $item) {\n            $parts = explode('.', $item);\n            if (count($parts) >= 2) {\n                $ingredients[] = [\n                    'name' => trim($parts[0]),\n                    'weight' => (float)trim($parts[1])\n                ];\n            }\n        }\n        \n        return $ingredients;\n    }\n    \n    public function parseFoodEntryItems(string $rawEntry)\n    {\n        $items = [];\n        $entries = array_map('trim', explode('-', $rawEntry));\n        \n        foreach ($entries as $entry) {\n            $parts = explode('.', $entry);\n            if (count($parts) >= 2) {\n                $items[] = [\n                    'name' => trim($parts[0]),\n                    'weight' => (float)trim($parts[1])\n                ];\n            }\n        }\n        \n        return $items;\n    }\n    \n    private function parseDate(string $dateString)\n    {\n        // Assuming date format is YYYY-MM-DD\n        return date('Y-m-d', strtotime($dateString));\n    }\n}\n```",
      "testStrategy": "Create unit tests for each parsing method with various input formats. Test edge cases like empty data, malformed entries, and special characters. Verify that the parser correctly handles aliases, ingredient weights, and date formats.",
      "priority": "high",
      "dependencies": [
        3,
        4
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Nutrition Calculator Service",
      "description": "Create a service to calculate nutrition values (calories, protein, fat, carbs) for food entries",
      "details": "Create a NutritionCalculatorService to calculate nutrition values for food entries and recipes:\n\n```php\n<?php\nnamespace App\\Services;\n\nuse App\\Models\\Ingredient;\nuse App\\Models\\Recipe;\n\nclass NutritionCalculatorService\n{\n    private $dataParserService;\n    \n    public function __construct(DataParserService $dataParserService)\n    {\n        $this->dataParserService = $dataParserService;\n    }\n    \n    public function calculateRecipeNutrition(Recipe $recipe, array $ingredients)\n    {\n        $totalWeight = 0;\n        $totalCalories = 0;\n        $totalProtein = 0;\n        $totalFat = 0;\n        $totalCarbs = 0;\n        \n        foreach ($recipe->ingredients as $recipeIngredient) {\n            $ingredient = $this->findIngredientByName($recipeIngredient['name'], $ingredients);\n            if (!$ingredient) {\n                continue;\n            }\n            \n            $weight = $recipeIngredient['weight'];\n            $totalWeight += $weight;\n            \n            $totalCalories += ($ingredient['calories'] * $weight / 100);\n            $totalProtein += ($ingredient['protein'] * $weight / 100);\n            $totalFat += ($ingredient['fat'] * $weight / 100);\n            $totalCarbs += ($ingredient['carbs'] * $weight / 100);\n        }\n        \n        return [\n            'total_weight' => $totalWeight,\n            'calories' => $totalCalories,\n            'protein' => $totalProtein,\n            'fat' => $totalFat,\n            'carbs' => $totalCarbs\n        ];\n    }\n    \n    public function calculateFoodEntryNutrition(string $rawEntry, array $ingredients, array $recipes)\n    {\n        $parsedItems = $this->dataParserService->parseFoodEntryItems($rawEntry);\n        $totalCalories = 0;\n        $totalProtein = 0;\n        $totalFat = 0;\n        $totalCarbs = 0;\n        \n        $processedItems = [];\n        \n        foreach ($parsedItems as $item) {\n            $itemName = $item['name'];\n            $weight = $item['weight'];\n            \n            // Check if it's a recipe\n            $recipe = $this->findRecipeByName($itemName, $recipes);\n            if ($recipe) {\n                $ratio = $weight / $recipe['total_weight'];\n                $calories = $recipe['calories'] * $ratio;\n                $protein = $recipe['protein'] * $ratio;\n                $fat = $recipe['fat'] * $ratio;\n                $carbs = $recipe['carbs'] * $ratio;\n                \n                $processedItems[] = [\n                    'type' => 'recipe',\n                    'name' => $recipe['name'],\n                    'weight' => $weight,\n                    'calories' => $calories,\n                    'protein' => $protein,\n                    'fat' => $fat,\n                    'carbs' => $carbs\n                ];\n            } else {\n                // Check if it's an ingredient\n                $ingredient = $this->findIngredientByName($itemName, $ingredients);\n                if ($ingredient) {\n                    $calories = $ingredient['calories'] * $weight / 100;\n                    $protein = $ingredient['protein'] * $weight / 100;\n                    $fat = $ingredient['fat'] * $weight / 100;\n                    $carbs = $ingredient['carbs'] * $weight / 100;\n                    \n                    $processedItems[] = [\n                        'type' => 'ingredient',\n                        'name' => $ingredient['name'],\n                        'weight' => $weight,\n                        'calories' => $calories,\n                        'protein' => $protein,\n                        'fat' => $fat,\n                        'carbs' => $carbs\n                    ];\n                } else {\n                    // Unknown item\n                    $processedItems[] = [\n                        'type' => 'unknown',\n                        'name' => $itemName,\n                        'weight' => $weight,\n                        'calories' => 0,\n                        'protein' => 0,\n                        'fat' => 0,\n                        'carbs' => 0\n                    ];\n                }\n            }\n            \n            $totalCalories += $processedItems[count($processedItems) - 1]['calories'];\n            $totalProtein += $processedItems[count($processedItems) - 1]['protein'];\n            $totalFat += $processedItems[count($processedItems) - 1]['fat'];\n            $totalCarbs += $processedItems[count($processedItems) - 1]['carbs'];\n        }\n        \n        return [\n            'parsed_items' => $processedItems,\n            'calories' => $totalCalories,\n            'protein' => $totalProtein,\n            'fat' => $totalFat,\n            'carbs' => $totalCarbs\n        ];\n    }\n    \n    private function findIngredientByName(string $name, array $ingredients)\n    {\n        $name = strtolower(trim($name));\n        \n        foreach ($ingredients as $ingredient) {\n            if (strtolower($ingredient['name']) === $name) {\n                return $ingredient;\n            }\n            \n            foreach ($ingredient['aliases'] as $alias) {\n                if (strtolower(trim($alias)) === $name) {\n                    return $ingredient;\n                }\n            }\n        }\n        \n        return null;\n    }\n    \n    private function findRecipeByName(string $name, array $recipes)\n    {\n        $name = strtolower(trim($name));\n        \n        foreach ($recipes as $recipe) {\n            if (strtolower($recipe['name']) === $name) {\n                return $recipe;\n            }\n            \n            foreach ($recipe['aliases'] as $alias) {\n                if (strtolower(trim($alias)) === $name) {\n                    return $recipe;\n                }\n            }\n        }\n        \n        return null;\n    }\n}\n```",
      "testStrategy": "Create unit tests with various food entries and recipes to verify correct calculation of nutrition values. Test scenarios with both ingredients and recipes in a single food entry. Verify that the calculator correctly handles weight ratios and unit conversions.",
      "priority": "high",
      "dependencies": [
        3,
        5
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implement Data Synchronization Service",
      "description": "Create a service to synchronize data between Google Sheets and MongoDB",
      "details": "Create a DataSyncService to handle synchronization between Google Sheets and MongoDB:\n\n```php\n<?php\nnamespace App\\Services;\n\nuse App\\Models\\Ingredient;\nuse App\\Models\\Recipe;\nuse App\\Models\\FoodEntry;\nuse App\\Models\\DailySummary;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass DataSyncService\n{\n    private $googleSheetsService;\n    private $dataParserService;\n    private $nutritionCalculatorService;\n    \n    public function __construct(\n        GoogleSheetsService $googleSheetsService,\n        DataParserService $dataParserService,\n        NutritionCalculatorService $nutritionCalculatorService\n    ) {\n        $this->googleSheetsService = $googleSheetsService;\n        $this->dataParserService = $dataParserService;\n        $this->nutritionCalculatorService = $nutritionCalculatorService;\n    }\n    \n    public function syncAll()\n    {\n        Log::info('Starting full data synchronization');\n        \n        $this->syncIngredients();\n        $this->syncRecipes();\n        $this->syncFoodLog();\n        \n        Log::info('Full data synchronization completed');\n    }\n    \n    public function syncIngredients()\n    {\n        Log::info('Syncing ingredients');\n        \n        $rawData = $this->googleSheetsService->getIngredientsSheet();\n        $parsedIngredients = $this->dataParserService->parseIngredients($rawData);\n        \n        foreach ($parsedIngredients as $ingredientData) {\n            Ingredient::updateOrCreate(\n                ['name' => $ingredientData['name']],\n                $ingredientData\n            );\n        }\n        \n        Log::info('Ingredients sync completed: ' . count($parsedIngredients) . ' ingredients processed');\n    }\n    \n    public function syncRecipes()\n    {\n        Log::info('Syncing recipes');\n        \n        $rawData = $this->googleSheetsService->getRecipesSheet();\n        $parsedRecipes = $this->dataParserService->parseRecipes($rawData);\n        $ingredients = Ingredient::all()->toArray();\n        \n        foreach ($parsedRecipes as $recipeData) {\n            $nutritionData = $this->nutritionCalculatorService->calculateRecipeNutrition((object)$recipeData, $ingredients);\n            $recipeData = array_merge($recipeData, $nutritionData);\n            \n            Recipe::updateOrCreate(\n                ['name' => $recipeData['name']],\n                $recipeData\n            );\n        }\n        \n        Log::info('Recipes sync completed: ' . count($parsedRecipes) . ' recipes processed');\n    }\n    \n    public function syncFoodLog()\n    {\n        Log::info('Syncing food log');\n        \n        $rawData = $this->googleSheetsService->getFoodLogSheet();\n        $parsedFoodEntries = $this->dataParserService->parseFoodLog($rawData);\n        $ingredients = Ingredient::all()->toArray();\n        $recipes = Recipe::all()->toArray();\n        \n        $processedDates = [];\n        \n        foreach ($parsedFoodEntries as $foodEntryData) {\n            $nutritionData = $this->nutritionCalculatorService->calculateFoodEntryNutrition(\n                $foodEntryData['raw_entry'],\n                $ingredients,\n                $recipes\n            );\n            \n            $foodEntryData = array_merge($foodEntryData, $nutritionData);\n            \n            FoodEntry::updateOrCreate(\n                [\n                    'date' => $foodEntryData['date'],\n                    'meal_number' => $foodEntryData['meal_number'],\n                    'raw_entry' => $foodEntryData['raw_entry']\n                ],\n                $foodEntryData\n            );\n            \n            if (!in_array($foodEntryData['date'], $processedDates)) {\n                $processedDates[] = $foodEntryData['date'];\n            }\n        }\n        \n        // Update daily summaries for all affected dates\n        foreach ($processedDates as $date) {\n            $this->updateDailySummary($date);\n        }\n        \n        Log::info('Food log sync completed: ' . count($parsedFoodEntries) . ' entries processed');\n    }\n    \n    private function updateDailySummary($date)\n    {\n        Log::info('Updating daily summary for ' . $date);\n        \n        $foodEntries = FoodEntry::where('date', $date)->get();\n        \n        $totalCalories = 0;\n        $totalProtein = 0;\n        $totalFat = 0;\n        $totalCarbs = 0;\n        $meals = [];\n        \n        foreach ($foodEntries as $entry) {\n            $totalCalories += $entry->calories;\n            $totalProtein += $entry->protein;\n            $totalFat += $entry->fat;\n            $totalCarbs += $entry->carbs;\n            \n            $meals[] = [\n                'meal_number' => $entry->meal_number,\n                'raw_entry' => $entry->raw_entry,\n                'parsed_items' => $entry->parsed_items,\n                'calories' => $entry->calories,\n                'protein' => $entry->protein,\n                'fat' => $entry->fat,\n                'carbs' => $entry->carbs\n            ];\n        }\n        \n        DailySummary::updateOrCreate(\n            ['date' => $date],\n            [\n                'meals' => $meals,\n                'total_calories' => $totalCalories,\n                'total_protein' => $totalProtein,\n                'total_fat' => $totalFat,\n                'total_carbs' => $totalCarbs\n            ]\n        );\n        \n        Log::info('Daily summary updated for ' . $date);\n    }\n}\n```",
      "testStrategy": "Create integration tests that mock Google Sheets API responses and verify the synchronization process. Test scenarios with new, updated, and deleted entries. Verify that daily summaries are correctly calculated and updated.",
      "priority": "high",
      "dependencies": [
        3,
        4,
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Implement Cron Job for Data Synchronization",
      "description": "Set up a scheduled task to periodically sync data from Google Sheets",
      "details": "1. Create a console command for data synchronization:\n\n```php\n<?php\nnamespace App\\Console\\Commands;\n\nuse App\\Services\\DataSyncService;\nuse Illuminate\\Console\\Command;\n\nclass SyncGoogleSheetsData extends Command\n{\n    protected $signature = 'app:sync-google-sheets';\n    protected $description = 'Synchronize data from Google Sheets';\n    \n    private $dataSyncService;\n    \n    public function __construct(DataSyncService $dataSyncService)\n    {\n        parent::__construct();\n        $this->dataSyncService = $dataSyncService;\n    }\n    \n    public function handle()\n    {\n        $this->info('Starting Google Sheets data synchronization...');\n        \n        try {\n            $this->dataSyncService->syncAll();\n            $this->info('Data synchronization completed successfully.');\n            return 0;\n        } catch (\\Exception $e) {\n            $this->error('Data synchronization failed: ' . $e->getMessage());\n            return 1;\n        }\n    }\n}\n```\n\n2. Register the command in App\\Console\\Kernel.php:\n\n```php\nprotected function schedule(Schedule $schedule)\n{\n    $schedule->command('app:sync-google-sheets')->hourly();\n}\n```\n\n3. Ensure the Laravel scheduler is running by adding this to your server's crontab:\n\n```\n* * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1\n```\n\nOr in Docker, make sure the scheduler is running in the container.",
      "testStrategy": "Test the command by running 'php artisan app:sync-google-sheets' and verifying that data is correctly synchronized. Test the scheduler by temporarily setting a more frequent schedule (e.g., every minute) and verifying that the command runs automatically.",
      "priority": "medium",
      "dependencies": [
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Implement Webhook for Data Synchronization",
      "description": "Create a webhook endpoint to trigger data synchronization on demand",
      "details": "1. Create a controller for the webhook endpoint:\n\n```php\n<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Services\\DataSyncService;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass WebhookController extends Controller\n{\n    private $dataSyncService;\n    \n    public function __construct(DataSyncService $dataSyncService)\n    {\n        $this->dataSyncService = $dataSyncService;\n    }\n    \n    public function syncData(Request $request)\n    {\n        // Validate webhook request (you might want to add authentication)\n        $token = $request->header('X-Webhook-Token');\n        if ($token !== config('services.webhook.token')) {\n            Log::warning('Invalid webhook token received');\n            return response()->json(['error' => 'Unauthorized'], 401);\n        }\n        \n        Log::info('Webhook received for data synchronization');\n        \n        try {\n            // Check if specific sync type is requested\n            $syncType = $request->input('sync_type');\n            \n            if ($syncType === 'ingredients') {\n                $this->dataSyncService->syncIngredients();\n            } else if ($syncType === 'recipes') {\n                $this->dataSyncService->syncRecipes();\n            } else if ($syncType === 'food_log') {\n                $this->dataSyncService->syncFoodLog();\n            } else {\n                // Default to full sync\n                $this->dataSyncService->syncAll();\n            }\n            \n            return response()->json(['status' => 'success', 'message' => 'Data synchronization completed']);\n        } catch (\\Exception $e) {\n            Log::error('Webhook sync failed: ' . $e->getMessage());\n            return response()->json(['status' => 'error', 'message' => $e->getMessage()], 500);\n        }\n    }\n}\n```\n\n2. Add the webhook route in routes/api.php:\n\n```php\nRoute::post('/webhook/sync', [WebhookController::class, 'syncData']);\n```\n\n3. Add webhook token configuration in config/services.php:\n\n```php\n'webhook' => [\n    'token' => env('WEBHOOK_TOKEN'),\n],\n```\n\n4. Update .env file with a secure webhook token:\n\n```\nWEBHOOK_TOKEN=your-secure-random-token\n```",
      "testStrategy": "Create a test that sends a POST request to the webhook endpoint with various sync_type parameters and verifies the response. Test authentication by sending requests with valid and invalid tokens. Verify that the appropriate synchronization methods are called based on the sync_type parameter.",
      "priority": "medium",
      "dependencies": [
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Implement Food Tracker Controller",
      "description": "Create a controller to display food tracking data and daily summaries",
      "details": "Create a FoodTrackerController to handle the index and show routes:\n\n```php\n<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\DailySummary;\nuse Illuminate\\Http\\Request;\n\nclass FoodTrackerController extends Controller\n{\n    /**\n     * Display a listing of daily summaries.\n     */\n    public function index()\n    {\n        $dailySummaries = DailySummary::orderBy('date', 'desc')->get();\n        \n        return view('food-tracker.index', compact('dailySummaries'));\n    }\n    \n    /**\n     * Display the detailed food log for a specific date.\n     */\n    public function show($date)\n    {\n        $dailySummary = DailySummary::where('date', $date)->firstOrFail();\n        \n        return view('food-tracker.show', compact('dailySummary'));\n    }\n}\n```\n\nAdd routes in routes/web.php:\n\n```php\nRoute::get('/', [FoodTrackerController::class, 'index'])->name('food-tracker.index');\nRoute::get('/day/{date}', [FoodTrackerController::class, 'show'])->name('food-tracker.show');\n```",
      "testStrategy": "Create feature tests for both the index and show methods. Test that the index page displays all daily summaries in descending date order. Test that the show page displays detailed information for a specific date, including all meals and nutrition totals.",
      "priority": "medium",
      "dependencies": [
        3,
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Create Index View",
      "description": "Create a view to display a list of daily summaries",
      "details": "Create the index view at resources/views/food-tracker/index.blade.php:\n\n```blade\n@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <h1>Food Tracker - Daily Summaries</h1>\n    \n    <div class=\"table-responsive\">\n        <table class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Calories</th>\n                    <th>Protein (g)</th>\n                    <th>Fat (g)</th>\n                    <th>Carbs (g)</th>\n                    <th>Meals</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                @foreach($dailySummaries as $summary)\n                <tr>\n                    <td>{{ $summary->date->format('Y-m-d') }}</td>\n                    <td>{{ number_format($summary->total_calories, 1) }}</td>\n                    <td>{{ number_format($summary->total_protein, 1) }}</td>\n                    <td>{{ number_format($summary->total_fat, 1) }}</td>\n                    <td>{{ number_format($summary->total_carbs, 1) }}</td>\n                    <td>{{ count($summary->meals) }}</td>\n                    <td>\n                        <a href=\"{{ route('food-tracker.show', $summary->date->format('Y-m-d')) }}\" class=\"btn btn-sm btn-primary\">View Details</a>\n                    </td>\n                </tr>\n                @endforeach\n            </tbody>\n        </table>\n    </div>\n</div>\n@endsection\n```\n\nCreate the layout file at resources/views/layouts/app.blade.php:\n\n```blade\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Food Tracker</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark mb-4\">\n        <div class=\"container\">\n            <a class=\"navbar-brand\" href=\"{{ route('food-tracker.index') }}\">Food Tracker</a>\n        </div>\n    </nav>\n\n    <main>\n        @yield('content')\n    </main>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n```",
      "testStrategy": "Create a browser test that visits the index page and verifies that all expected elements are present. Test that the table displays the correct number of daily summaries and that each row contains the expected data. Test that the 'View Details' link navigates to the correct show page.",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Create Show View",
      "description": "Create a view to display detailed information for a specific day",
      "details": "Create the show view at resources/views/food-tracker/show.blade.php:\n\n```blade\n@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <h1>Daily Food Log: {{ $dailySummary->date->format('Y-m-d') }}</h1>\n    \n    <div class=\"card mb-4\">\n        <div class=\"card-header\">\n            <h2>Daily Summary</h2>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"card text-center\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Calories</h5>\n                            <p class=\"card-text fs-2\">{{ number_format($dailySummary->total_calories, 1) }}</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card text-center\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Protein (g)</h5>\n                            <p class=\"card-text fs-2\">{{ number_format($dailySummary->total_protein, 1) }}</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card text-center\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Fat (g)</h5>\n                            <p class=\"card-text fs-2\">{{ number_format($dailySummary->total_fat, 1) }}</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card text-center\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Carbs (g)</h5>\n                            <p class=\"card-text fs-2\">{{ number_format($dailySummary->total_carbs, 1) }}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <h2>Meals</h2>\n    \n    @foreach($dailySummary->meals as $index => $meal)\n    <div class=\"card mb-4\">\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\n            <h3>Meal {{ $meal['meal_number'] }}</h3>\n            <div>\n                <span class=\"badge bg-primary\">{{ number_format($meal['calories'], 1) }} cal</span>\n                <span class=\"badge bg-success\">{{ number_format($meal['protein'], 1) }}g protein</span>\n                <span class=\"badge bg-danger\">{{ number_format($meal['fat'], 1) }}g fat</span>\n                <span class=\"badge bg-warning text-dark\">{{ number_format($meal['carbs'], 1) }}g carbs</span>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <p><strong>Raw Entry:</strong> {{ $meal['raw_entry'] }}</p>\n            \n            <h4>Items</h4>\n            <div class=\"table-responsive\">\n                <table class=\"table table-sm\">\n                    <thead>\n                        <tr>\n                            <th>Type</th>\n                            <th>Name</th>\n                            <th>Weight (g)</th>\n                            <th>Calories</th>\n                            <th>Protein (g)</th>\n                            <th>Fat (g)</th>\n                            <th>Carbs (g)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @foreach($meal['parsed_items'] as $item)\n                        <tr>\n                            <td>{{ ucfirst($item['type']) }}</td>\n                            <td>{{ $item['name'] }}</td>\n                            <td>{{ number_format($item['weight'], 1) }}</td>\n                            <td>{{ number_format($item['calories'], 1) }}</td>\n                            <td>{{ number_format($item['protein'], 1) }}</td>\n                            <td>{{ number_format($item['fat'], 1) }}</td>\n                            <td>{{ number_format($item['carbs'], 1) }}</td>\n                        </tr>\n                        @endforeach\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n    @endforeach\n    \n    <div class=\"mb-4\">\n        <a href=\"{{ route('food-tracker.index') }}\" class=\"btn btn-secondary\">Back to List</a>\n    </div>\n</div>\n@endsection\n```",
      "testStrategy": "Create a browser test that visits the show page for a specific date and verifies that all expected elements are present. Test that the page displays the correct daily summary information and that each meal is displayed with its items. Test that the 'Back to List' button navigates back to the index page.",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Implement Logging System",
      "description": "Set up comprehensive logging for all data processing and synchronization steps",
      "details": "1. Configure Laravel's logging system in config/logging.php to use daily files:\n\n```php\n'channels' => [\n    'stack' => [\n        'driver' => 'stack',\n        'channels' => ['single', 'daily'],\n        'ignore_exceptions' => false,\n    ],\n    \n    'single' => [\n        'driver' => 'single',\n        'path' => storage_path('logs/laravel.log'),\n        'level' => env('LOG_LEVEL', 'debug'),\n    ],\n    \n    'daily' => [\n        'driver' => 'daily',\n        'path' => storage_path('logs/laravel.log'),\n        'level' => env('LOG_LEVEL', 'debug'),\n        'days' => 14,\n    ],\n    \n    'sync' => [\n        'driver' => 'daily',\n        'path' => storage_path('logs/sync.log'),\n        'level' => env('LOG_LEVEL', 'debug'),\n        'days' => 30,\n    ],\n],\n```\n\n2. Create a custom logging channel for synchronization:\n\n```php\nuse Illuminate\\Support\\Facades\\Log;\n\nclass SyncLogger\n{\n    public static function info($message, array $context = [])\n    {\n        Log::channel('sync')->info($message, $context);\n    }\n    \n    public static function error($message, array $context = [])\n    {\n        Log::channel('sync')->error($message, $context);\n    }\n    \n    public static function warning($message, array $context = [])\n    {\n        Log::channel('sync')->warning($message, $context);\n    }\n    \n    public static function debug($message, array $context = [])\n    {\n        Log::channel('sync')->debug($message, $context);\n    }\n}\n```\n\n3. Update the DataSyncService to use the custom logger:\n\n```php\nuse App\\Logging\\SyncLogger;\n\n// Replace Log::info with SyncLogger::info\n// Replace Log::error with SyncLogger::error\n// etc.\n```\n\n4. Add more detailed logging throughout the synchronization process:\n\n```php\npublic function syncIngredients()\n{\n    SyncLogger::info('Starting ingredients synchronization');\n    \n    try {\n        $rawData = $this->googleSheetsService->getIngredientsSheet();\n        SyncLogger::debug('Retrieved ' . count($rawData) . ' rows from Google Sheets');\n        \n        $parsedIngredients = $this->dataParserService->parseIngredients($rawData);\n        SyncLogger::debug('Parsed ' . count($parsedIngredients) . ' ingredients');\n        \n        $updated = 0;\n        $created = 0;\n        \n        foreach ($parsedIngredients as $ingredientData) {\n            $ingredient = Ingredient::where('name', $ingredientData['name'])->first();\n            \n            if ($ingredient) {\n                $ingredient->update($ingredientData);\n                $updated++;\n            } else {\n                Ingredient::create($ingredientData);\n                $created++;\n            }\n        }\n        \n        SyncLogger::info('Ingredients sync completed: ' . $created . ' created, ' . $updated . ' updated');\n    } catch (\\Exception $e) {\n        SyncLogger::error('Ingredients sync failed: ' . $e->getMessage(), [\n            'exception' => $e,\n        ]);\n        throw $e;\n    }\n}\n```",
      "testStrategy": "Create tests that verify log entries are created at the appropriate points in the synchronization process. Test error scenarios to ensure exceptions are properly logged. Verify that logs are written to the correct files and contain the expected information.",
      "priority": "low",
      "dependencies": [
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "Create API Endpoints",
      "description": "Implement API endpoints to access food tracking data programmatically",
      "details": "Create an API controller to provide JSON access to food tracking data:\n\n```php\n<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\DailySummary;\nuse App\\Models\\Ingredient;\nuse App\\Models\\Recipe;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass FoodTrackerApiController extends Controller\n{\n    /**\n     * Get a list of all daily summaries.\n     */\n    public function getDailySummaries(Request $request)\n    {\n        $limit = $request->input('limit', 30);\n        $dailySummaries = DailySummary::orderBy('date', 'desc')\n            ->limit($limit)\n            ->get()\n            ->map(function ($summary) {\n                return [\n                    'date' => $summary->date->format('Y-m-d'),\n                    'total_calories' => $summary->total_calories,\n                    'total_protein' => $summary->total_protein,\n                    'total_fat' => $summary->total_fat,\n                    'total_carbs' => $summary->total_carbs,\n                    'meal_count' => count($summary->meals),\n                ];\n            });\n        \n        return response()->json($dailySummaries);\n    }\n    \n    /**\n     * Get detailed information for a specific date.\n     */\n    public function getDailySummary($date)\n    {\n        $dailySummary = DailySummary::where('date', $date)->firstOrFail();\n        \n        return response()->json([\n            'date' => $dailySummary->date->format('Y-m-d'),\n            'total_calories' => $dailySummary->total_calories,\n            'total_protein' => $dailySummary->total_protein,\n            'total_fat' => $dailySummary->total_fat,\n            'total_carbs' => $dailySummary->total_carbs,\n            'meals' => $dailySummary->meals,\n        ]);\n    }\n    \n    /**\n     * Get a list of all ingredients.\n     */\n    public function getIngredients()\n    {\n        $ingredients = Ingredient::all();\n        return response()->json($ingredients);\n    }\n    \n    /**\n     * Get a list of all recipes.\n     */\n    public function getRecipes()\n    {\n        $recipes = Recipe::all();\n        return response()->json($recipes);\n    }\n}\n```\n\nAdd API routes in routes/api.php:\n\n```php\nRoute::prefix('v1')->group(function () {\n    Route::get('/daily-summaries', [FoodTrackerApiController::class, 'getDailySummaries']);\n    Route::get('/daily-summaries/{date}', [FoodTrackerApiController::class, 'getDailySummary']);\n    Route::get('/ingredients', [FoodTrackerApiController::class, 'getIngredients']);\n    Route::get('/recipes', [FoodTrackerApiController::class, 'getRecipes']);\n});\n```",
      "testStrategy": "Create API tests for each endpoint to verify they return the expected JSON structure and data. Test pagination and filtering options. Test error handling for invalid requests or missing data.",
      "priority": "low",
      "dependencies": [
        3,
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Write Documentation",
      "description": "Create comprehensive documentation for the application",
      "details": "Create a README.md file with the following sections:\n\n```markdown\n# Calorie and Macronutrient Tracking Application\n\nA Laravel application that automatically collects data from Google Sheets, calculates calories and macronutrients (protein, fat, carbohydrates) for each meal and day, and stores the results in MongoDB.\n\n## Features\n\n- Automatic synchronization with Google Sheets\n- Parsing of food log entries\n- Calculation of nutrition values for ingredients and recipes\n- Daily summaries of nutrition intake\n- Web interface for viewing food logs and nutrition data\n- API endpoints for programmatic access\n- Webhook for triggering data synchronization\n\n## Requirements\n\n- PHP 8.x\n- Composer\n- MongoDB\n- Docker and Docker Compose (optional)\n\n## Installation\n\n### Using Docker\n\n1. Clone the repository\n2. Copy `.env.example` to `.env` and configure environment variables\n3. Run `docker-compose up -d`\n4. Access the application at http://localhost:8000\n\n### Manual Installation\n\n1. Clone the repository\n2. Copy `.env.example` to `.env` and configure environment variables\n3. Run `composer install`\n4. Run `php artisan serve`\n5. Access the application at http://localhost:8000\n\n## Configuration\n\n### Google Sheets Integration\n\n1. Create a Google Cloud project and enable the Google Sheets API\n2. Create service account credentials and download the JSON key file\n3. Place the key file in the `storage` directory and update the path in `.env`\n4. Share your Google Sheet with the service account email\n\n### MongoDB Configuration\n\n1. Configure MongoDB connection details in `.env`\n\n### Webhook Configuration\n\n1. Set a secure webhook token in `.env`\n2. Use the webhook URL: `https://your-domain.com/api/webhook/sync`\n3. Include the token in the `X-Webhook-Token` header\n\n## Usage\n\n### Web Interface\n\n- Home page: List of daily summaries\n- Daily detail page: Detailed information for a specific day\n\n### API Endpoints\n\n- `GET /api/v1/daily-summaries`: List of daily summaries\n- `GET /api/v1/daily-summaries/{date}`: Detailed information for a specific date\n- `GET /api/v1/ingredients`: List of all ingredients\n- `GET /api/v1/recipes`: List of all recipes\n\n### Webhook\n\n- `POST /api/webhook/sync`: Trigger data synchronization\n  - Optional parameter: `sync_type` (ingredients, recipes, food_log)\n\n## Data Structure\n\n### Google Sheets\n\n- **Ingredients**: List of products with aliases and nutrition values per 100g\n- **Recipes**: Recipes where ingredients are mixed (e.g., salads)\n- **FoodLog**: Log of user's meals (each row is a separate meal, products separated by dots and weight by dots, e.g., \"chicken.120 - buckwheat.50\")\n\n### MongoDB Collections\n\n- **ingredients**: Ingredients with nutrition values\n- **recipes**: Recipes with ingredients and calculated nutrition values\n- **food_entries**: Individual meal entries with parsed items and nutrition values\n- **daily_summaries**: Daily summaries with meals and total nutrition values\n\n## License\n\nMIT\n```\n\nAlso create API documentation in a separate file:\n\n```markdown\n# API Documentation\n\n## Authentication\n\nCurrently, the API does not require authentication.\n\n## Endpoints\n\n### GET /api/v1/daily-summaries\n\nReturns a list of daily summaries.\n\n**Query Parameters:**\n- `limit` (optional): Maximum number of summaries to return (default: 30)\n\n**Response:**\n```json\n[\n  {\n    \"date\": \"2023-11-01\",\n    \"total_calories\": 2145.5,\n    \"total_protein\": 120.3,\n    \"total_fat\": 70.8,\n    \"total_carbs\": 230.5,\n    \"meal_count\": 3\n  },\n  ...\n]\n```\n\n### GET /api/v1/daily-summaries/{date}\n\nReturns detailed information for a specific date.\n\n**Parameters:**\n- `date`: Date in YYYY-MM-DD format\n\n**Response:**\n```json\n{\n  \"date\": \"2023-11-01\",\n  \"total_calories\": 2145.5,\n  \"total_protein\": 120.3,\n  \"total_fat\": 70.8,\n  \"total_carbs\": 230.5,\n  \"meals\": [\n    {\n      \"meal_number\": 1,\n      \"raw_entry\": \"chicken.120 - buckwheat.50\",\n      \"parsed_items\": [\n        {\n          \"type\": \"ingredient\",\n          \"name\": \"chicken\",\n          \"weight\": 120,\n          \"calories\": 198.0,\n          \"protein\": 41.4,\n          \"fat\": 4.2,\n          \"carbs\": 0\n        },\n        {\n          \"type\": \"ingredient\",\n          \"name\": \"buckwheat\",\n          \"weight\": 50,\n          \"calories\": 170.0,\n          \"protein\": 6.1,\n          \"fat\": 1.2,\n          \"carbs\": 35.7\n        }\n      ],\n      \"calories\": 368.0,\n      \"protein\": 47.5,\n      \"fat\": 5.4,\n      \"carbs\": 35.7\n    },\n    ...\n  ]\n}\n```\n\n### GET /api/v1/ingredients\n\nReturns a list of all ingredients.\n\n**Response:**\n```json\n[\n  {\n    \"_id\": \"...\",\n    \"name\": \"chicken\",\n    \"aliases\": [\"chicken breast\", \"chicken fillet\"],\n    \"calories\": 165.0,\n    \"protein\": 34.5,\n    \"fat\": 3.5,\n    \"carbs\": 0,\n    \"created_at\": \"2023-11-01T12:00:00.000Z\",\n    \"updated_at\": \"2023-11-01T12:00:00.000Z\"\n  },\n  ...\n]\n```\n\n### GET /api/v1/recipes\n\nReturns a list of all recipes.\n\n**Response:**\n```json\n[\n  {\n    \"_id\": \"...\",\n    \"name\": \"Greek Salad\",\n    \"aliases\": [\"greek\"],\n    \"ingredients\": [\n      {\n        \"name\": \"cucumber\",\n        \"weight\": 100\n      },\n      {\n        \"name\": \"tomato\",\n        \"weight\": 100\n      },\n      {\n        \"name\": \"feta\",\n        \"weight\": 50\n      },\n      {\n        \"name\": \"olive oil\",\n        \"weight\": 15\n      }\n    ],\n    \"total_weight\": 265,\n    \"calories\": 235.5,\n    \"protein\": 8.7,\n    \"fat\": 18.3,\n    \"carbs\": 10.2,\n    \"created_at\": \"2023-11-01T12:00:00.000Z\",\n    \"updated_at\": \"2023-11-01T12:00:00.000Z\"\n  },\n  ...\n]\n```\n\n### POST /api/webhook/sync\n\nTriggers data synchronization from Google Sheets.\n\n**Headers:**\n- `X-Webhook-Token`: Authentication token (required)\n\n**Request Body:**\n```json\n{\n  \"sync_type\": \"food_log\" // Optional: \"ingredients\", \"recipes\", \"food_log\", or omit for full sync\n}\n```\n\n**Response:**\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Data synchronization completed\"\n}\n```\n```",
      "testStrategy": "Review the documentation for accuracy and completeness. Verify that all installation steps, configuration options, and usage instructions are correct. Test the API documentation by making requests to each endpoint and comparing the responses to the documented examples.",
      "priority": "low",
      "dependencies": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}